%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%                                                                             %|%
%|%                                                                             %|%
     function Triangles_Of_Attack(NUMBER_OF_PLAYERS, IS_WIDE_SCREEN, MUSIC_ID)  %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%                                     I?M                                     %|%
%|%                                       M8'N+,                                %|%
%|%                                        DM   :DMI,.                          %|%
%|%                                         :M~       ,N?,.                     %|%
%|%                                           MN          ,MM?M .               %|%
%|%                                            ?M               ,MM~            %|%
%|%                                              M?            ,MM              %|%
%|%                                               DM          M7                %|%
%|%                                                ?M,      ~I                  %|%
%|%                                                  M8    8M                   %|%
%|%                                                   OM MM                     %|%
%|%                                MMM                 :M:                      %|%
%|%                                MMM                                          %|%
%|%                                                                             %|%
%|%                                                                             %|%
                     NAME_OF_THE_GAME = 'TRIANGLES OF ATTACK!';                 %|%  
%|%                                                                             %|%
%|%                             Z                                               %|%
%|%                           =M+                                               %|%
%|%                          MMM                                                %|%
%|%                        IMMMD                                                %|%
%|%                       MMMMM:                                                %|%
%|%                     $MMMMMM                                                 %|%
%|%                   ,MMMMMMMO                                                 %|%
%|%                  8MMMMMMMM                                                  %|%
%|%                ~MMMMMMMMMM                                                  %|%
%|%               DMMMMMMMMMM?                                                  %|%
%|%             +MMMMMMMMMMMM                                                   %|%
%|%            NMMMMMMMMMMMMD                                                   %|%
%|%          IMMMMMMMMMMMMMM:                                                   %|%
%|%              :+78MMMMMMM                                                    %|%
%|%                     $MMO                                                    %|%
%|%                      ~M:                                                    %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%

%%  Environment
  close all;
  clc;



%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   DESCRIPTION:                                                              %|%
%|%     A multiplyer game, where each player controls different sections of     %|%
%|%     the keyboard. It is recommended to use an extra keyboard to play with   %|%
%|%     more than 2 people.                                                     %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   SYSTEM REQUIREMENTS:                                                      %|%
%|%     This game was developed on a Windows machine, but has been made with    %|%
%|%     compatibility in mind. It should run on any operating system. However,  %|%
%|%     it does require a relatively quick processor in order to function at    %|%
%|%     intended speed. If you find any problems with platform incompatibility   %|%
%|%     with either your version of MATLAB or operating system, please email    %|%
%|%     me with a description of the problem and I will do the best I cant to   %|%
%|%     resolve it.                                                             %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   LICENCE:                                                                  %|%
%|%     See Licence.txt for more information.                                   %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   CREDITS:                                                                  %|%               
%|%     The line intersection algorithm is thanks to U. Murat Erdem.            %|%
%|%     U. Murat Erdem's original work can be found here:                       %|%
%|%       http://www.mathworks.com/matlabcentral/fileexchange                   %|%
%|%       27205-fast-line-segment-intersection.                                 %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   USAGE PARAMETERS:                                                         %|%
%|%     It takes three parameters NUMBER_OF_PLAYERS, as a number at or          %|%
%|%     between 2 and 4, IS_WIDE_SCREEN, to indicate a narrow or wide screen    %|%
%|%     with a 1 for yes and 2 for no, and MUSIC_ID, a number between -1 and 7  %|%
%|%     to indicate the starting match song.                                    %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%   GAME RULES:                                                               %|%
        RULES = sprintf([                                                   ... %|%
        'Each player controls a specific colored triangle via 5 keys \n',   ... %|%
        '(fire, forward, backward, left, and right). At the start of \n',   ... %|%
        'each game all players are placed in the center of a 2d arena. \n', ... %|%
        'Players will lose points if they are shot, or if they fire \n',    ... %|%
        'thier laser. Points are gained by hitting another player with \n', ... %|%
        'thier laser. If a player wishes to shoot a larger laser, holding\n',...%|%
        'the fire for a longer period of time will do this. As the game\n', ... %|%
        'progresses, the ships will accelerate and turn slightly faster.\n' ... %|%
        'Hitting the back of another players ship rewards double points.\n' ... %|%
        'The game ends when the music stops.']);                                %|%
%|%                                                                             %|%
%|%                                                                             %|%

%|%   CONTROLS:                                                                 %|%
        KEY_PAUSE             = 'p';                                            %|%
        KEY_RESTART           = 'r';                                            %|%
        KEY_QUIT              = 'escape';                                       %|%
        KEY_PLAYER_1_FORWARD  = 'w';                                            %|%
        KEY_PLAYER_1_BACKWARD = 's';                                            %|%
        KEY_PLAYER_1_LEFT     = 'a';                                            %|%
        KEY_PLAYER_1_RIGHT    = 'd';                                            %|%
        KEY_PLAYER_1_FIRE     = '4';                                            %|%
        KEY_PLAYER_2_FORWARD  = 'o';                                            %|%
        KEY_PLAYER_2_BACKWARD = 'l';                                            %|%
        KEY_PLAYER_2_LEFT     = 'k';                                            %|%
        KEY_PLAYER_2_RIGHT    = 'semicolon';                                    %|%
        KEY_PLAYER_2_FIRE     = '0';                                            %|%
        KEY_PLAYER_3_FORWARD  = 'f';                                            %|%
        KEY_PLAYER_3_BACKWARD = 'v';                                            %|%
        KEY_PLAYER_3_LEFT     = 'c';                                            %|%
        KEY_PLAYER_3_RIGHT    = 'b';                                            %|%
        KEY_PLAYER_3_FIRE     = 'space';                                        %|%
        KEY_PLAYER_4_FORWARD  = 'j';                                            %|%
        KEY_PLAYER_4_BACKWARD = 'm';                                            %|%
        KEY_PLAYER_4_LEFT     = 'n';                                            %|%
        KEY_PLAYER_4_RIGHT    = 'comma';                                        %|%
        KEY_PLAYER_4_FIRE     = 'period';                                       %|%
%|%                                                                             %|%
%|%                                                                             %|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%
%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%%|%



%%  Settings
  DIRECTORY = pwd;
  DIVIDER   = '\';
  for K = 1:length(DIRECTORY)
    if DIRECTORY(K) == '/'
      DIVIDER = '/';
      break;
    elseif DIRECTORY(K) == '\'
      break;
    end;
  end;
  PATH   = [DIRECTORY, DIVIDER];
  FORMAT = '.wav';
  %[SOUND_EXPLODE,      SLFS1] = wavread([PATH, 'Explode', FORMAT]);
  [SOUND_COUNTDOWN,    SLFS2] = wavread([PATH, 'Countdown', FORMAT]);
  %[SOUND_LASER,        SLFS3] = wavread([PATH, 'Laser', FORMAT]);
  [SOUND_PAUSE,        SLFS4] = wavread([PATH, 'Pause', FORMAT]);
  %[SOUND_CHARGE,       SLFS5] = wavread([PATH, 'Charge', FORMAT]);
  [SOUND_MUSIC_CHOICE, SLFS6] = wavread([PATH, sprintf('%.*f', 0, MUSIC_ID), FORMAT]);
  SOUND_PITCH_FACTOR          = 0.01;
  TEXT_TITLE_BAR              = ' ';
  TEXT_SCORE_PREFIX           = 'Player ';
  TEXT_SCORE_POSTFIX          = ': ';
  TEXT_SCORE_SPACING          = 95;
  TEXT_SCORE_POSITION         = 200;
  TEXT_NAME_POSITION          = 16;
  TEXT_SPACING_FROM_TOP       = 13;
  TEXT_SIZE                   = 10;
  DELAY_START                 = 1;
  DELAY_FRAME                 = 0.0001;
  DELAY_MUSIC_INTRO           = 1;
  WALL_WIDTH                  = 1;
  WALL_PADDING                = 25;
  WINDOW_WIDTH                = 800;
  WINDOW_HEIGHT               = 480;
  if IS_WIDE_SCREEN == 1
    FIGURE_HEIGHT = 392;
    TEXT_SIZE     = 13;
  else
    TEXT_SIZE     = 10;
    FIGURE_HEIGHT = 492;
  end
  FIGURE_WIDTH                 = 621;
  FIGURE_CENTER                = [FIGURE_WIDTH / 2, FIGURE_HEIGHT / 2];
  FIGURE_COLOR_BACKGROUND      = [0, 0, 0];
  FIGURE_COLOR_MENU            = [1, 1, 1];
  LASER_WAIT                   = 100;
  LASER_SPEED                  = 5;
  LASER_MINIMUM_SPEED          = 5;
  LASER_SIZE                   = 6;
  LASER_SIZE_CHARGED           = 20;
  SHIP_HEIGHT                  = 30;
  SHIP_WIDTH                   = 15;
  SHIP_INDENT_DEPTH            = 1;
  SHIP_DRAG                    = 0.04;
  SHIP_ACCELERATION_BACKWARD   = 0.06;
  SHIP_ACCELERATION_FORWARD    = 0.1;
  SHIP_ACCELERATION_INCREMENT  = 0.00001;
  SHIP_MAXIMUM_SPEED           = 3;
  SHIP_MAXIMUM_SPEED_INCREMENT = 0.00001;
  SHIP_ROTATE_SPEED            = 1.5;
  SHIP_ROTATE_SPEED_INCREMENT  = 0.00001;
  SCORE_DEDUCTION_HIT          = 50;
  SCORE_DEDUCTION_LASER        = 10;
  SCORE_MAP_SHIP = [100, 200, 200, 100]; %It is double damage for a backside hit



%%  Variables
  Number_Of_Lasers = 0;
  Key_Was_Hit      = false;
  Do_Pause         = false;
  Do_Restart       = false;
  Do_Quit_Game     = false;
  Is_Not_In_Menu   = true;



%%  Plots
  PLOT_FACTOR = LASER_SIZE / 2;
  PLOT_LASER =[                                                            ...
    [-PLOT_FACTOR, -PLOT_FACTOR, PLOT_FACTOR,  PLOT_FACTOR, -PLOT_FACTOR]; ...
    [-PLOT_FACTOR,  PLOT_FACTOR, PLOT_FACTOR, -PLOT_FACTOR, -PLOT_FACTOR]];
  PLOT_FACTOR = LASER_SIZE_CHARGED / 2;
  PLOT_LASER_CHARGED =[                                                    ...
    [-PLOT_FACTOR, -PLOT_FACTOR, PLOT_FACTOR,  PLOT_FACTOR, -PLOT_FACTOR]; ...
    [-PLOT_FACTOR,  PLOT_FACTOR, PLOT_FACTOR, -PLOT_FACTOR, -PLOT_FACTOR]];
  PLOT_FACTOR = SHIP_WIDTH / 2;
  PLOT_SHIP =[                                                                  ...
    [PLOT_FACTOR, SHIP_WIDTH, PLOT_FACTOR,       0, PLOT_FACTOR] - PLOT_FACTOR; ...
    [SHIP_HEIGHT, 0,          SHIP_INDENT_DEPTH, 0, SHIP_HEIGHT] - SHIP_HEIGHT / 2];



%%  Structures
  START_X = (FIGURE_WIDTH  - WALL_PADDING) / 2;
  START_Y = (FIGURE_HEIGHT - WALL_PADDING) / 2;
  SPACING = 30;
  Lasers(1) = struct(      ... %Bullet structure definition only
    'Is_Charged',  false,  ...
    'Owner',       0,      ...
    'Do_Remove',   true,   ...
    'Bullet_Fill', [],     ...
    'Rotation',    0,      ...
    'Position',    [0, 0], ...
    'Velocity',    0);
  Players(1) = struct(                                           ...
    'Score',             0,                                      ...
    'Score_Text',        [],                                     ...
    'Frames_Till_Fire',  0,                                      ...
    'Previous_Position', [],                                     ...
    'Position',          [START_X - SPACING, START_Y + SPACING], ...
    'Rotation',          45, ... %Counter clock-wise from the top
    'Previous_Rotation', 0,                                      ...
    'Velocity',          0,                                      ...
    'Ship_Color',        [0.5, 0, 0.5],                          ...
    'Ship_Fill',         [],                                     ...
    'Input_Movement',    0,                                      ...
    'Input_Rotation',    0,                                      ...
    'Current_Charge',    0,                                      ...
    'Do_Charge_Laser',   false,                                  ...
    'Do_Fire',           false,                                  ...
    'Key_Forward',       KEY_PLAYER_1_FORWARD,                   ...
    'Key_Backward',      KEY_PLAYER_1_BACKWARD,                  ...
    'Key_Left',          KEY_PLAYER_1_LEFT,                      ...
    'Key_Right',         KEY_PLAYER_1_RIGHT,                     ...
    'Key_Fire',          KEY_PLAYER_1_FIRE);
  Players(2) = struct(                                           ...
    'Score',             0,                                      ...
    'Score_Text',        [],                                     ...
    'Frames_Till_Fire',  0,                                      ...
    'Previous_Position', [],                                     ...
    'Position',          [START_X - SPACING, START_Y - SPACING], ...
    'Rotation',          135,                                    ...
    'Previous_Rotation', 0,                                      ...
    'Velocity',          0,                                      ...
    'Ship_Color',        [1, 0, 0],                              ...
    'Ship_Fill',         [],                                     ...
    'Input_Movement',    0,                                      ...
    'Input_Rotation',    0,                                      ...
    'Current_Charge',    0,                                      ...
    'Do_Charge_Laser',   false,                                  ...
    'Do_Fire',           false,                                  ...
    'Key_Forward',       KEY_PLAYER_2_FORWARD,                   ...
    'Key_Backward',      KEY_PLAYER_2_BACKWARD,                  ...
    'Key_Left',          KEY_PLAYER_2_LEFT,                      ...
    'Key_Right',         KEY_PLAYER_2_RIGHT,                     ...
    'Key_Fire',          KEY_PLAYER_2_FIRE);
  Players(3) = struct(                                           ...
    'Score',             0,                                      ...
    'Score_Text',        [],                                     ...
    'Frames_Till_Fire',  0,                                      ...
    'Previous_Position', [],                                     ...
    'Position',          [START_X + SPACING, START_Y - SPACING], ...
    'Rotation',          225,                                    ...
    'Previous_Rotation', 0,                                      ...
    'Velocity',          0,                                      ...
    'Ship_Color',        [0, 1, 0],                              ...
    'Ship_Fill',         [],                                     ...
    'Input_Movement',    0,                                      ...
    'Input_Rotation',    0,                                      ...
    'Current_Charge',    0,                                      ...
    'Do_Charge_Laser',   false,                                  ...
    'Do_Fire',           false,                                  ...
    'Key_Forward',       KEY_PLAYER_3_FORWARD,                   ...
    'Key_Backward',      KEY_PLAYER_3_BACKWARD,                  ...
    'Key_Left',          KEY_PLAYER_3_LEFT,                      ...
    'Key_Right',         KEY_PLAYER_3_RIGHT,                     ...
    'Key_Fire',          KEY_PLAYER_3_FIRE);
  Players(4) = struct(                                           ...
    'Score',             0,                                      ...
    'Score_Text',        [],                                     ...
    'Frames_Till_Fire',  0,                                      ...
    'Previous_Position', [],                                     ...
    'Position',          [START_X + SPACING, START_Y + SPACING], ...
    'Rotation',          315,                                    ...
    'Previous_Rotation', 0,                                      ...
    'Velocity',          0,                                      ...
    'Ship_Color',        [0, 0, 1],                              ...
    'Ship_Fill',         [],                                     ...
    'Input_Movement',    0,                                      ...
    'Input_Rotation',    0,                                      ...
    'Current_Charge',    0,                                      ...
    'Do_Charge_Laser',   false,                                  ...
    'Do_Fire',           false,                                  ...
    'Key_Forward',       KEY_PLAYER_4_FORWARD,                   ...
    'Key_Backward',      KEY_PLAYER_4_BACKWARD,                  ...
    'Key_Left',          KEY_PLAYER_4_LEFT,                      ...
    'Key_Right',         KEY_PLAYER_4_RIGHT,                     ...
    'Key_Fire',          KEY_PLAYER_4_FIRE);



%% Handle_Key_Press
  function Handle_Key_Press(Source, Event)
    if Is_Not_In_Menu
      for K = 1:NUMBER_OF_PLAYERS
        switch Event.Key
          case Players(K).Key_Forward
            Players(K).Input_Movement = 1;
          case Players(K).Key_Left
            Players(K).Input_Rotation = 1;
          case Players(K).Key_Right
            Players(K).Input_Rotation = -1;
          case Players(K).Key_Backward
            Players(K).Input_Movement = -1;
          case Players(K).Key_Fire
            Players(K).Do_Charge_Laser = true;
        end;
      end;
    end;
    switch Event.Key
      case KEY_PAUSE
        Do_Pause = true;
      case KEY_RESTART
        Do_Restart = true;
      case KEY_QUIT
        Do_Quit_Game = true;
    end;
    Key_Was_Hit = true;
  end;



%% Handle_Key_Release
  function Handle_Key_Release(Source, Event)
    if Is_Not_In_Menu
      for K = 1:NUMBER_OF_PLAYERS
        switch Event.Key
          case Players(K).Key_Right
            if Players(K).Input_Rotation == -1
              Players(K).Input_Rotation = 0;
            end;
          case Players(K).Key_Left
            if Players(K).Input_Rotation == 1
              Players(K).Input_Rotation = 0;
            end;
          case Players(K).Key_Backward
            if Players(K).Input_Movement == -1
              Players(K).Input_Movement = 0;
            end;
          case Players(K).Key_Forward
            if Players(K).Input_Movement == 1
              Players(K).Input_Movement = 0;
            end;
          case Players(K).Key_Fire
            Players(K).Do_Charge_Laser = false;
            Players(K).Do_Fire         = true;
        end;
      end;
    end;
  end;



%%  Initialize_Figure
  function Result = Initialize_Figure
    Dimensions = get(0, 'ScreenSize');
    Result = figure(                                      ...
      'Position',[                                        ...
        (Dimensions(3) - WINDOW_WIDTH)  / 2               ...
        (Dimensions(4) - WINDOW_HEIGHT) / 2 WINDOW_WIDTH, ...
        WINDOW_HEIGHT]);
    axis([0,  FIGURE_WIDTH, 0, FIGURE_HEIGHT]);
    axis manual;
    hold on;
    set(gca,                             ...
      'Color',  FIGURE_COLOR_BACKGROUND, ...
      'YColor', FIGURE_COLOR_BACKGROUND, ...
      'XColor', FIGURE_COLOR_BACKGROUND, ...
      'YTick',  [],                      ...
      'XTick',  []);
    set(gcf,                         ...
      'Name',        TEXT_TITLE_BAR, ...
      'NumberTitle', 'Off');
    set(Result,                                 ...
      'MenuBar',       'None',                  ...
      'ToolBar',       'None',                  ...
      'Color',         FIGURE_COLOR_BACKGROUND, ...
      'Units',         'Normalized',            ...
      'OuterPosition', [0, 0, 1, 1],            ...
      'Resize',        'Off',                   ...
      'KeyPressFcn',   @Handle_Key_Press,       ...
      'KeyReleaseFcn', @Handle_Key_Release);
    fill(                                                                  ...
      [0, FIGURE_WIDTH - WALL_PADDING, FIGURE_WIDTH - WALL_PADDING, 0, 0], ...
      [FIGURE_HEIGHT, FIGURE_HEIGHT, FIGURE_HEIGHT - WALL_PADDING,         ...
       FIGURE_HEIGHT - WALL_PADDING, FIGURE_HEIGHT], FIGURE_COLOR_MENU,    ...
      'EdgeColor', FIGURE_COLOR_MENU);
    text(                                    ...
      TEXT_NAME_POSITION,                    ...
      FIGURE_HEIGHT - TEXT_SPACING_FROM_TOP, ...
      NAME_OF_THE_GAME,                      ...
      'FontSize', TEXT_SIZE,                 ...
      'Color',    FIGURE_COLOR_BACKGROUND);
    plot(                                                                  ...
      [0, FIGURE_WIDTH - WALL_PADDING, FIGURE_WIDTH - WALL_PADDING, 0, 0], ...
      [FIGURE_HEIGHT, FIGURE_HEIGHT, 0, 0, FIGURE_HEIGHT], '-',            ...
      'LineWidth', WALL_WIDTH,                                             ...
      'Color',     FIGURE_COLOR_MENU);
  end



%%  Finalize_Figure
  function Finalize_Figure(World)
    if ishandle(World)
      close(World);
    end;
  end;



%%  Initialize_Game
  function Initialize_Game
    Players(1).Rotation = 45;
    Players(2).Rotation = 135;
    Players(3).Rotation = 225;
    Players(4).Rotation = 315;
    Players(1).Position = [START_X - SPACING, START_Y + SPACING];
    Players(2).Position = [START_X - SPACING, START_Y - SPACING];
    Players(3).Position = [START_X + SPACING, START_Y - SPACING];
    Players(4).Position = [START_X + SPACING, START_Y + SPACING];
    for K = 1:NUMBER_OF_PLAYERS
      Players(K).Score = 0;
      Players(K).Score_Text =                                             ...
        text(                                                             ...
          TEXT_SCORE_POSITION + (K - 1) * TEXT_SCORE_SPACING,             ...
          FIGURE_HEIGHT - TEXT_SPACING_FROM_TOP,                          ...
          [TEXT_SCORE_PREFIX, sprintf('%.*f', 0, K), TEXT_SCORE_POSTFIX], ...
          'FontSize', TEXT_SIZE, ...
          'Color',    Players(K).Ship_Color);
      Players(K).Ship_Fill =                       ...
        patch(                                     ...
          PLOT_SHIP(1,:) + Players(K).Position(1), ...
          PLOT_SHIP(2,:) + Players(K).Position(2), ...
          Players(K).Ship_Color,                   ...
          'EdgeColor', Players(K).Ship_Color);
    end;
  end;



%%  Finalize_Game
  function Finalize_Game
    for K = 1:NUMBER_OF_PLAYERS
      if ishandle(Players(K).Score_Text)
        delete(Players(K).Score_Text);
      end;
      if ishandle(Players(K).Ship_Fill)
        delete(Players(K).Ship_Fill);
      end;
    end;
  end;



%%  Display_Instructions
  function Result = Display_Instructions
    Text = regexp(RULES, '\n', 'split');
    for K = 1:length(Text)
      Result(K) =                                                        ...
        text(                                                            ...
          TEXT_NAME_POSITION,                                            ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * K - 1, ...
          Text(K),                                                       ...
          'FontSize', TEXT_SIZE,                                         ...
          'Color',    FIGURE_COLOR_MENU);
    end;
    Index = length(Text) + 1;
    Result(Index) =                                            ...
      text(                                                    ...
        TEXT_NAME_POSITION,                                    ...
        FIGURE_HEIGHT - WALL_PADDING * 3 + TEXT_NAME_POSITION, ...
        'DIRECTIONS',                                          ...
        'FontSize', TEXT_SIZE,                                 ...
        'Color',    FIGURE_COLOR_MENU);
    Text = [                        ...
      'Press ',                     ...
      KEY_RESTART, ' to restart, ', ...
      KEY_QUIT,    ' to quit, or ', ...
      KEY_PAUSE,   ' to pause. To begin playing press any key.'];
    Index = Index + 1;
    Result(Index) =                                                ...
      text(                                                        ...
        TEXT_NAME_POSITION,                                        ...
        FIGURE_HEIGHT - WALL_PADDING * 3 + TEXT_NAME_POSITION * 2, ...
        Text,                                                      ...
        'FontSize', TEXT_SIZE,                                     ...
        'Color',    FIGURE_COLOR_MENU);
    Keys_Forward =[           ...
      [KEY_PLAYER_1_FORWARD], ...
      [KEY_PLAYER_2_FORWARD], ...
      [KEY_PLAYER_3_FORWARD], ...
      [KEY_PLAYER_4_FORWARD]];
    Keys_Backward =[           ...
      [KEY_PLAYER_1_BACKWARD], ...
      [KEY_PLAYER_2_BACKWARD], ...
      [KEY_PLAYER_3_BACKWARD], ...
      [KEY_PLAYER_4_BACKWARD]];
    Keys_Left =[           ...
      [KEY_PLAYER_1_LEFT], ...
      [KEY_PLAYER_2_LEFT], ...
      [KEY_PLAYER_3_LEFT], ...
      [KEY_PLAYER_4_LEFT]];
    Keys_Right =[           ... 
      [KEY_PLAYER_1_RIGHT], ...
      [KEY_PLAYER_2_RIGHT], ...
      [KEY_PLAYER_3_RIGHT], ...
      [KEY_PLAYER_4_RIGHT]];
    Keys_Fire =[           ...
      [KEY_PLAYER_1_FIRE], ...
      [KEY_PLAYER_2_FIRE], ...
      [KEY_PLAYER_3_FIRE], ...
      [KEY_PLAYER_4_FIRE]];
    for K = 1:NUMBER_OF_PLAYERS
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 12, ...
          [TEXT_SCORE_PREFIX, sprintf('%.*f', 0, K), ' Controls'],    ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 13, ...
          ['Forward: ', Keys_Forward(K)],                             ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 14, ...
          ['Backward: ', Keys_Backward(K)],                           ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 15, ...
          ['Left: ', Keys_Left(K)],                                   ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 16, ...
          ['Right: ', Keys_Right(K)],                                 ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
      Index = Index + 1;
      Result(Index) =                                                 ...
        text(                                                         ...
          TEXT_NAME_POSITION + 120 * (K - 1),                         ...
          FIGURE_HEIGHT - WALL_PADDING * 3 - TEXT_NAME_POSITION * 17, ...
          ['Fire: ', Keys_Fire(K)],                                   ...
          'FontSize', TEXT_SIZE,                                      ...
          'Color',    Players(K).Ship_Color);
    end;
  end;



%%  Remove_Instructions
  function Remove_Instructions(Instructions)
    for K = 1:length(Instructions)
      if ishandle(Instructions(K))
        set(Instructions(K), 'String', ' ');
      end
    end
  end;



%%  Display_Winner
  function Result = Display_Winner
    Index           = 1;
    Winning_Players = [];
    Winning_Score   = Players(1).Score;
    Text            = '';
    for K = 1:NUMBER_OF_PLAYERS
      if Players(K).Score == Winning_Score
        Winning_Players(Index) = K;
        Index = Index + 1;
      elseif Players(K).Score > Winning_Score
        Winning_Score      = Players(K).Score;
        Winning_Players(1) = K;
        Index              = 1;
      end;
    end;
    Text = 'THE GAME WAS ';
    if length(Winning_Players) > 1
      Text = [Text, 'A TIE BETWEEN '];
      for K = 1:length(Winning_Players)
        Text = [Text, 'PLAYER ', sprintf('%.*f', 0, Winning_Players(K))];
        if K == length(Winning_Players) - 1
          Text = [Text, ', AND '];
        elseif K ~= length(Winning_Players)
          Text = [Text, ', '];
        end;
      end;
    else
      Text = [Text, 'WON BY PLAYER ', sprintf('%.*f', 0, Winning_Players(1))];
    end;
    Text = [Text, ' WITH A SCORE OF ', sprintf('%.*f', 0, Winning_Score)];
    Result(1) =                                                                   ...
      fill(                                                                       ...
        [0, FIGURE_WIDTH - WALL_PADDING, FIGURE_WIDTH - WALL_PADDING, 0, 0],      ...
        [FIGURE_HEIGHT / 2, FIGURE_HEIGHT / 2, FIGURE_HEIGHT / 2 - WALL_PADDING,  ...
         FIGURE_HEIGHT / 2 - WALL_PADDING, FIGURE_HEIGHT / 2], FIGURE_COLOR_MENU, ...
        'EdgeColor', FIGURE_COLOR_MENU);
    Result(2) =                                    ...
      text(                                        ...
        TEXT_NAME_POSITION,                        ...
        FIGURE_HEIGHT / 2 - TEXT_SPACING_FROM_TOP, ...
        Text,                                      ...
        'FontSize', TEXT_SIZE,                     ...
        'Color',    FIGURE_COLOR_BACKGROUND);
    Text = [                          ...
      'Press ',                       ...
      KEY_RESTART, ' to restart or ', ...
      KEY_QUIT,    ' to quit.'];
    Result(3) =                                        ...
      text(                                            ...
        TEXT_NAME_POSITION,                            ...
        FIGURE_HEIGHT / 2 - 3 * TEXT_SPACING_FROM_TOP, ...
        Text,                                          ...
        'FontSize', TEXT_SIZE,                         ...
        'Color',    FIGURE_COLOR_MENU);
  end;



%%  Remove_Winner
  function Remove_Winner(Winner)
    for K = 1:length(Winner)
      if ishandle(Winner(K))
        delete(Winner(K));
      end;
    end;
  end;



%%  Display_Paused
  function Result = Display_Paused
    Result(1) =                                                                   ...
      fill(                                                                       ...
        [0, FIGURE_WIDTH - WALL_PADDING, FIGURE_WIDTH - WALL_PADDING, 0, 0],      ...
        [FIGURE_HEIGHT / 2, FIGURE_HEIGHT / 2, FIGURE_HEIGHT / 2 - WALL_PADDING,  ...
         FIGURE_HEIGHT / 2 - WALL_PADDING, FIGURE_HEIGHT / 2], FIGURE_COLOR_MENU, ...
        'EdgeColor', FIGURE_COLOR_MENU);
    Result(2) =                                    ...
      text(                                        ...
        TEXT_NAME_POSITION,                        ...
        FIGURE_HEIGHT / 2 - TEXT_SPACING_FROM_TOP, ...
        'PAUSED',                                  ...
        'FontSize', TEXT_SIZE,                     ...
        'Color',    FIGURE_COLOR_BACKGROUND);
    Text = [                        ...
      'Press ',                     ...
      KEY_RESTART, ' to restart, ', ...
      KEY_QUIT,    ' to quit, or ', ...
      KEY_PAUSE,   ' to resume. '];
    Result(3) =                                        ...
      text(                                            ...
        TEXT_NAME_POSITION,                            ...
        FIGURE_HEIGHT / 2 - 3 * TEXT_SPACING_FROM_TOP, ...
        Text,                                          ...
        'FontSize', TEXT_SIZE,                         ...
        'Color',    FIGURE_COLOR_MENU);
    for K = 1:NUMBER_OF_PLAYERS
      Players(K).Input_Rotation = 0;
      Players(K).Input_Movement = 0;
    end;
  end;



%%  Remove_Paused
  function Remove_Paused(Paused)
    for K = 1:length(Paused)
      if ishandle(Paused(K))
        delete(Paused(K));
      end;
    end;
  end;



%%  Check_Collision
  %Pass 0 for Plot_B to test for the walls
  function Result = Check_Collisions(Plot_A, Plot_B) 
    if Plot_B == 0
      Plot_B =[                                                  ...
                                0, FIGURE_HEIGHT - WALL_PADDING, ...
      FIGURE_WIDTH - WALL_PADDING, FIGURE_HEIGHT - WALL_PADDING; ...
      FIGURE_WIDTH - WALL_PADDING, FIGURE_HEIGHT - WALL_PADDING, ...
      FIGURE_WIDTH - WALL_PADDING,                            0; ...
      FIGURE_WIDTH - WALL_PADDING,                            0, ...
                                0,                            0; ...
                                0,                            0, ...
                                0, FIGURE_HEIGHT - WALL_PADDING];
    end;
    X1          = repmat(Plot_A(:, 1), 1, 4);
    Y1          = repmat(Plot_A(:, 2), 1, 4);
    Plot_B      = Plot_B';
    X3          = repmat(Plot_B(1, :), 4, 1);
    Y3          = repmat(Plot_B(2, :), 4, 1);
    X4_X3       = repmat(Plot_B(3, :), 4, 1) - X3;
    Y4_Y3       = repmat(Plot_B(4, :), 4, 1) - Y3;
    X2_X1       = repmat(Plot_A(:, 3), 1, 4) - X1;
    Y2_Y1       = repmat(Plot_A(:, 4), 1, 4) - Y1;
    Y1_Y3       = Y1 - Y3;
    X1_X3       = X1 - X3;
    Denominator = (Y4_Y3 .* X2_X1 - X4_X3 .* Y2_Y1);
    U1          = (X4_X3 .* Y1_Y3 - Y4_Y3 .* X1_X3) ./ Denominator;
    U2          = (X2_X1 .* Y1_Y3 - Y2_Y1 .* X1_X3) ./ Denominator;
    Result      = (U1 >= 0) & (U1 <= 1) & (U2 >= 0) & (U2 <= 1);
  end;



%%  Update_Ships
  function Update_Ships
    for K = 1:NUMBER_OF_PLAYERS
      if Players(K).Do_Charge_Laser
        Players(K).Current_Charge = Players(K).Current_Charge + 1;
      end;
      if Players(K).Input_Rotation ~= 0
        Players(K).Rotation = ...
          Players(K).Rotation + (SHIP_ROTATE_SPEED * Players(K).Input_Rotation);
        while Players(K).Rotation > 360
          Players(K).Rotation = Players(K).Rotation - 360;
        end;
        while Players(K).Rotation < 0
          Players(K).Rotation = Players(K).Rotation + 360;
        end;
      end;
      if Players(K).Input_Movement == -1
        Players(K).Velocity = Players(K).Velocity - SHIP_ACCELERATION_BACKWARD;
      elseif Players(K).Input_Movement == 1
        Players(K).Velocity = Players(K).Velocity + SHIP_ACCELERATION_FORWARD;
      elseif Players(K).Velocity > 0
        Players(K).Velocity = Players(K).Velocity - SHIP_DRAG;
        if Players(K).Velocity < 0
          Players(K).Velocity = 0;
        end;
      else
        Players(K).Velocity = Players(K).Velocity + SHIP_DRAG;
        if Players(K).Velocity > 0
          Players(K).Velocity = 0;
        end;
      end;
      if Players(K).Velocity > SHIP_MAXIMUM_SPEED
        Players(K).Velocity = SHIP_MAXIMUM_SPEED;
      elseif Players(K).Velocity < -SHIP_MAXIMUM_SPEED
        Players(K).Velocity = -SHIP_MAXIMUM_SPEED;
      end;
      Turn = (pi/180) * Players(K).Rotation * -1;
      Players(K).Position =[                                      ...
        Players(K).Position(1) + sin(Turn) * Players(K).Velocity, ...
        Players(K).Position(2) + cos(Turn) * Players(K).Velocity];
      Turn = (pi/180) * Players(K).Rotation;
      X =(                            ...
        PLOT_SHIP(1,:) * cos(Turn)  - ...
        PLOT_SHIP(2,:) * sin(Turn)) + Players(K).Position(1);
      Y =(                            ...
        PLOT_SHIP(1,:) * sin(Turn)  + ...
        PLOT_SHIP(2,:) * cos(Turn)) + Players(K).Position(2);
      Result =                    ...
        Check_Collisions([        ...
          X(1), Y(1), X(2), Y(2); ...
          X(2), Y(2), X(3), Y(3); ...
          X(3), Y(3), X(4), Y(4); ...
          X(4), Y(4), X(5), Y(5)], 0);
      if ismember(1, Result)
        Pointing_Away = false;
        %Allow movement only if the ship is facing away from the wall
        %and moving forward, or if the ship is facing the wall and 
        %moving backwards.
        if                                        ...
        Result(1, 1) == 1 || Result(2, 1) == 1 || ...
        Result(3, 1) == 1 || Result(4, 1) == 1
          if Players(K).Rotation >= 90 && Players(K).Rotation <= 270
            Pointing_Away = true;
          end;
        elseif                                    ...
        Result(1, 2) == 1 || Result(2, 2) == 1 || ...
        Result(3, 2) == 1 || Result(4, 2) == 1
          if Players(K).Rotation >= 0 && Players(K).Rotation <= 180
            Pointing_Away = true;
          end;
        elseif                                    ...
        Result(1, 3) == 1 || Result(2, 3) == 1 || ...
        Result(3, 3) == 1 || Result(4, 3) == 1
          if Players(K).Rotation >= 270 || Players(K).Rotation <= 90
            Pointing_Away = true;
          end;
        else
          if Players(K).Rotation >= 180 && Players(K).Rotation <= 360
            Pointing_Away = true;
          end;
        end;
        if                                              ...
        ~(~Pointing_Away && Players(K).Velocity < 0) && ...
         (~Pointing_Away || Players(K).Velocity < 0)
          Players(K).Position = Players(K).Previous_Position;
          Players(K).Velocity = 0;
        end;
        Pointing_Away = false;
      end;
      if Players(K).Do_Fire
        Players(K).Do_Fire = false;
        Players(K).Score   = Players(K).Score - SCORE_DEDUCTION_LASER;
        if Players(K).Current_Charge >= LASER_WAIT
          Lasers(length(Lasers) + 1) =                   ...
            struct(                                      ...
              'Is_Charged', true,                        ...
              'Owner',      K,                           ...
              'Do_Remove',  false,                       ...
              'Bullet_Fill',                             ...
                fill((                                   ...
                  PLOT_LASER_CHARGED(1,:) * cos(Turn)  - ...
                  PLOT_LASER_CHARGED(2,:) * sin(Turn)) + ...
                  Players(K).Position(1),(               ...
                  PLOT_LASER_CHARGED(1,:) * sin(Turn)  + ...
                  PLOT_LASER_CHARGED(2,:) * cos(Turn)) + ...
                  Players(K).Position(2),                ...
                  Players(K).Ship_Color,                 ...
                  'EdgeColor', Players(K).Ship_Color),   ...
              'Rotation', Turn,                          ...
              'Position', Players(K).Position,           ...
              'Velocity', LASER_SPEED);
        else
          Lasers(length(Lasers) + 1) =                 ...
            struct(                                    ...
              'Is_Charged', false,                     ...
              'Owner',      K,                         ...
              'Do_Remove',  false,                     ...
              'Bullet_Fill',                           ...
                fill((                                 ...
                  PLOT_LASER(1,:) * cos(Turn)  -       ...
                  PLOT_LASER(2,:) * sin(Turn)) +       ...
                  Players(K).Position(1),(             ...
                  PLOT_LASER(1,:) * sin(Turn)  +       ...
                  PLOT_LASER(2,:) * cos(Turn)) +       ...
                  Players(K).Position(2),              ...
                  Players(K).Ship_Color,               ...
                  'EdgeColor', Players(K).Ship_Color), ...
              'Rotation', Turn,                        ...
              'Position', Players(K).Position,         ...
              'Velocity', LASER_SPEED);
        end;
        Players(K).Current_Charge = 0;
      end;
      set(Players(K).Ship_Fill,                                 ...
        'XData',(                                               ...
          PLOT_SHIP(1,:) * cos(Turn)  -                         ...
          PLOT_SHIP(2,:) * sin(Turn)) + Players(K).Position(1), ...
        'YData',(                                               ...
          PLOT_SHIP(1,:) * sin(Turn)  +                         ...
          PLOT_SHIP(2,:) * cos(Turn)) + Players(K).Position(2));
      Players(K).Previous_Position = Players(K).Position;
      Players(K).Previous_Rotation = Players(K).Rotation;
      if Players(K).Frames_Till_Fire > 0
        Players(K).Frames_Till_Fire = Players(K).Frames_Till_Fire - 1;
      end;
      SHIP_ACCELERATION_FORWARD = SHIP_ACCELERATION_INCREMENT  + SHIP_ACCELERATION_FORWARD;
      SHIP_MAXIMUM_SPEED        = SHIP_MAXIMUM_SPEED_INCREMENT + SHIP_MAXIMUM_SPEED;
      SHIP_ROTATE_SPEED         = SHIP_ROTATE_SPEED_INCREMENT  + SHIP_ROTATE_SPEED;
      set(Players(K).Score_Text,                                      ...
        'String', [                                                   ...
          TEXT_SCORE_PREFIX, sprintf('%.*f',0,K), TEXT_SCORE_POSTFIX, ...
          sprintf('%.*f',0,Players(K).Score)]);
    end;
  end;



%%  Update_Lasers
  function Update_Lasers
    New_Lasers(1) = struct( ...
      'Is_Charged',  false, ...
      'Owner',       0,     ...
      'Do_Remove',   true,  ...
      'Bullet_Fill', [],    ...
      'Rotation',    0,     ...
      'Position',    [0,0], ...
      'Velocity',    0);
    Index = 1;
    for L = 1:length(Lasers)
      if                                                      ...
      Lasers(L).Position(1) > FIGURE_WIDTH  - WALL_PADDING || ...
      Lasers(L).Position(2) > FIGURE_HEIGHT - WALL_PADDING || ...
      Lasers(L).Position(1) < 0                            || ...
      Lasers(L).Position(2) < 0 
        Lasers(L).Do_Remove = true;
      end;
      if ~Lasers(L).Do_Remove
        if Lasers(L).Is_Charged
          X =(                                                   ...
            PLOT_LASER_CHARGED(1,:) * cos(Lasers(L).Rotation)  - ...
            PLOT_LASER_CHARGED(2,:) * sin(Lasers(L).Rotation)) + Lasers(L).Position(1);
          Y =(                                                   ...
            PLOT_LASER_CHARGED(1,:) * sin(Lasers(L).Rotation)  + ...
            PLOT_LASER_CHARGED(2,:) * cos(Lasers(L).Rotation)) + Lasers(L).Position(2);
        else
          X =(                                           ...
            PLOT_LASER(1,:) * cos(Lasers(L).Rotation)  - ...
            PLOT_LASER(2,:) * sin(Lasers(L).Rotation)) + Lasers(L).Position(1);
          Y =(                                           ...
            PLOT_LASER(1,:) * sin(Lasers(L).Rotation)  + ...
            PLOT_LASER(2,:) * cos(Lasers(L).Rotation)) + Lasers(L).Position(2);
        end;
        XY =[                     ...
          X(1), Y(1), X(2), Y(2); ...
          X(2), Y(2), X(3), Y(3); ...
          X(3), Y(3), X(4), Y(4); ...
          X(4), Y(4), X(5), Y(5)];
        for R = 1:NUMBER_OF_PLAYERS
          if R ~= Lasers(L).Owner
            Turn = (pi/180) * Players(R).Rotation;
            X =(                            ...
              PLOT_SHIP(1,:) * cos(Turn)  - ...
              PLOT_SHIP(2,:) * sin(Turn)) + Players(R).Position(1);
            Y =(                            ...
              PLOT_SHIP(1,:) * sin(Turn)  + ...
              PLOT_SHIP(2,:) * cos(Turn)) + Players(R).Position(2);
            Result =                      ...
              Check_Collisions(           ...
                XY,[                      ...
                  X(1), Y(1), X(2), Y(2); ...
                  X(2), Y(2), X(3), Y(3); ...
                  X(3), Y(3), X(4), Y(4); ...
                  X(4), Y(4), X(5), Y(5)]);
            if ismember(1, Result)
              beep;
              Lasers(L).Do_Remove = true;
              Players(R).Score = Players(R).Score - SCORE_DEDUCTION_LASER;
              if                                        ...
              Result(1, 1) == 1 || Result(2, 1) == 1 || ...
              Result(3, 1) == 1 || Result(4, 1) == 1
                Players(Lasers(L).Owner).Score = ...
                  Players(Lasers(L).Owner).Score + SCORE_MAP_SHIP(1);
              elseif                                    ...
              Result(1, 2) == 1 || Result(2, 2) == 1 || ...
              Result(3, 2) == 1 || Result(4, 2) == 1
                Players(Lasers(L).Owner).Score = ...
                  Players(Lasers(L).Owner).Score + SCORE_MAP_SHIP(2);
              elseif                                    ...
              Result(1, 3) == 1 || Result(2, 3) == 1 || ...
              Result(3, 3) == 1 || Result(4, 3) == 1
                Players(Lasers(L).Owner).Score = ...
                  Players(Lasers(L).Owner).Score + SCORE_MAP_SHIP(3);
              else
                Players(Lasers(L).Owner).Score = ...
                  Players(Lasers(L).Owner).Score + SCORE_MAP_SHIP(4);
              end;
              break;
            end;
          end;
          Test_For_Collision_On_Walls = false;
        end;
      end;
      if ~Lasers(L).Do_Remove
        Lasers(L).Position =[                                                    ...
          Lasers(L).Position(1) + sin(-Lasers(L).Rotation) * Lasers(L).Velocity, ...
          Lasers(L).Position(2) + cos(-Lasers(L).Rotation) * Lasers(L).Velocity];
        if Lasers(L).Is_Charged
          set(Lasers(L).Bullet_Fill,...
            'XData',( ...
              PLOT_LASER_CHARGED(1,:) * cos(Lasers(L).Rotation)  -    ...
              PLOT_LASER_CHARGED(2,:) * sin(Lasers(L).Rotation)) +  
              Lasers(L).Position(1), ...
            'YData',(...
           PLOT_LASER_CHARGED(1,:) * sin(Lasers(L).Rotation)  +  ...                 
           PLOT_LASER_CHARGED(2,:) * cos(Lasers(L).Rotation)) + Lasers(L).Position(2));
        else
          set(Lasers(L).Bullet_Fill,                                              ...
            'XData',(                                                             ...
              PLOT_LASER(1,:) * cos(Lasers(L).Rotation)  -                        ...
              PLOT_LASER(2,:) * sin(Lasers(L).Rotation)) + Lasers(L).Position(1), ...
            'YData',(                                                             ...
              PLOT_LASER(1,:) * sin(Lasers(L).Rotation)  +                        ...
              PLOT_LASER(2,:) * cos(Lasers(L).Rotation)) + Lasers(L).Position(2));
        end;
        New_Lasers(Index) = Lasers(L);
        Index = Index + 1;
      else
        delete(Lasers(L).Bullet_Fill);
      end;
    end;
    Lasers = New_Lasers;
  end;



%%  Main
  if NUMBER_OF_PLAYERS > 1 && NUMBER_OF_PLAYERS < 5
    World      = Initialize_Figure;
    Do_Restart = true;
    while Do_Restart && ishandle(World)
      Is_Not_In_Menu = false;
      Instructions   = Display_Instructions;
      Key_Was_Hit    = false;
      while ~Key_Was_Hit && ~Do_Quit_Game && ishandle(World)
        pause(DELAY_FRAME);
      end
      Remove_Instructions(Instructions);
      Do_Restart     = true;
      Is_Not_In_Menu = true;
      while Do_Restart && ishandle(World)
        Do_Restart = false;
        First_Loop = true;
        Initialize_Game;
        [SOUND_MUSIC_CHOICE, SLFS6] = ...
          wavread([PATH, sprintf('%.*f', 0, MUSIC_ID), FORMAT]);
        Main_Song = audioplayer(SOUND_MUSIC_CHOICE, SLFS6);
        Main_Song.play;
        MUSIC_ID = mod(MUSIC_ID + 1, 6);
        while ~Do_Quit_Game && ishandle(World) && ~Do_Restart && Main_Song.isplaying
          Update_Ships;
          Update_Lasers;
          if First_Loop 
            pause(DELAY_MUSIC_INTRO);
            try
              wavplay(SOUND_COUNTDOWN, SLFS2);
            end;
            First_Loop = false;
          end
          if Do_Pause
            Is_Not_In_Menu = false;
            Do_Pause       = false;
            Pause          = Display_Paused;
            Main_Song.pause;
            try
              wavplay(SOUND_PAUSE, SLFS4, 'async'); %The only way for async sound
            end;
            while ~Do_Restart && ~Do_Pause && ~Do_Quit_Game && ishandle(World)
              pause(DELAY_FRAME);
            end
            Main_Song.resume;
            Remove_Paused(Pause);
            Do_Pause       = false;
            Is_Not_In_Menu = true;
          end;
          pause(DELAY_FRAME);
        end;
        Finalize_Game;
      end;
      if ishandle(World) 
        Winner         = Display_Winner;
        Is_Not_In_Menu = false;
        Do_Restart     = false;
        while ~Do_Quit_Game && ~Do_Restart && ishandle(World)
          pause(DELAY_FRAME);
        end
        Remove_Winner(Winner);
        Is_Not_In_Menu = true;
        Do_Restart;
      end;
    end;
    Finalize_Figure(World);
  else
    disp('The number of players must be 2, 3, or 4.')
  end;
end
